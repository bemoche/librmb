# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout for PR
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      
      - name: Checkout for Other
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3
        
      - name: List commits on the pull request
        if: github.event_name == 'pull_request'
        run: |
          response=$(curl --request GET \
          --url 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits' \
          --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Content-Type: application/json')
          echo $response > response.json
          
      - name: Get latest commit
        if: github.event_name == 'pull_request'
        run: |
          ls
          echo "Get length of the array:"
          length=$(jq 'length' response.json)
          echo "Get index of the latest commit:"
          index=$(($length - 1))
          echo "Get context of the latest commit:"
          latest_commit=$(jq --argjson index $index '.[$index]' response.json)
          echo "$latest_commit"
          echo "Get commit message of the latest commit:"
          latest_commit_message=$(echo "$latest_commit" | jq -r '.commit.message')
          echo "$latest_commit_message"
          echo "Get commit SHA of the latest commit:"
          latest_commit_sha=$(echo "$latest_commit" | jq -r '.sha')
          echo "$latest_commit_sha"
          echo "COMMIT_MESSAGE=$latest_commit_message" >> $GITHUB_ENV
          rm response.json
      
      # Format
      - name: Check code formatting with clang-format
        if: github.event_name == 'pull_request'
        uses: DoozyX/clang-format-lint-action@v0.13
        with:
          source: '.'
          extensions: 'h,cpp'
          style: llvm
          inplace: true
        # continue-on-error: true
      - uses: EndBug/add-and-commit@v4
        if: github.event_name == 'pull_request'
        with:
          author_name: Clang Format Robot
          author_email: robot@nonexistantwebsite.com
          message: 'Format Commit "${{env.COMMIT_MESSAGE}}"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Test Run Documentation + Dump Warnings/Errors
        run: |
          sudo apt install doxygen
          chmod +x scripts/find-not-documented.sh
          ./scripts/find-not-documented.sh
      
      - name: Commit Warnings/Errors
        uses: EndBug/add-and-commit@v4
        with:
          author_name: Documentation Warnings Bot
          author_email: robot@nonexistantwebsite.com
          message: 'Update docs warnings'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      # Install the RoboRio toolchain
      - name: Get toolchain
        run: |
          chmod +x ./gradlew
          ./gradlew installRoboRioToolchain
      
      # Build
      - name: Build
        run: |
          ./gradlew build
          ./gradlew publish
          mkdir repos
          
      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          destination_dir: ./repos
          publish_dir: ./build/repos
        
